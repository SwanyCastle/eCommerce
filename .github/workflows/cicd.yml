name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Get Github Actions IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: Add Github Actions IP to Security group
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port ${{ secrets.EC2_HOST_PORT }} --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_HOST_PORT }}
          script: |
            # .env 파일 생성
            # echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" > .env
            # echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
            # echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
            # echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
            # echo "KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}" >> .env
            # echo "KAKAO_REST_API_KEY=${{ secrets.KAKAO_REST_API_KEY }}" >> .env
            # echo "MYSQL_URL=${{ secrets.MYSQL_URL }}" >> .env
            # echo "NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}" >> .env
            # echo "NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}" >> .env
            # echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
            # echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
            # echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
      
            # Docker Compose 실행
            docker-compose down
            docker-compose pull
            docker-compose up -d --build
            
      - name: Remove Github Actions IP From Security Group
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port ${{ secrets.EC2_HOST_PORT }} --cidr ${{ steps.ip.outputs.ipv4 }}/32
